'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import Header from '@/components/layout/Header';
import BottomNav from '@/components/layout/BottomNav';
import Card from '@/components/common/Card';
import { useAuthStore } from '@/stores/authStore';

// Í≥µÏßÄÏÇ¨Ìï≠ ÌéòÏù¥ÏßÄ
export default function NoticesPage() {
  const router = useRouter();
  const { isAuthenticated } = useAuthStore();
  const [notices, setNotices] = useState([]);
  const [selectedNotice, setSelectedNotice] = useState(null);
  const [activeCategory, setActiveCategory] = useState('all'); // all, service, event, system
  
  const categories = [
    { id: 'all', label: 'Ï†ÑÏ≤¥' },
    { id: 'service', label: 'ÏÑúÎπÑÏä§' },
    { id: 'event', label: 'Ïù¥Î≤§Ìä∏' },
    { id: 'system', label: 'ÏãúÏä§ÌÖú' }
  ];
  
  useEffect(() => {
    if (!isAuthenticated) {
      router.push('/login');
      return;
    }
    
    // Í≥µÏßÄÏÇ¨Ìï≠ Î™© Îç∞Ïù¥ÌÑ∞ Î°úÎìú
    loadMockNotices();
  }, [isAuthenticated, router]);
  
  const loadMockNotices = () => {
    // TODO: API Ïó∞Îèô Ïãú Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞Î°ú ÍµêÏ≤¥
    const mockNotices = [
      {
        id: 1,
        category: 'event',
        title: 'üéâ MealStack Îü∞Ïπ≠ Í∏∞ÎÖê Ìï†Ïù∏ Ïù¥Î≤§Ìä∏',
        content: `MealStack Ï†ïÏãù Îü∞Ïπ≠ÏùÑ Í∏∞ÎÖêÌïòÏó¨ ÌäπÎ≥Ñ Ìï†Ïù∏ Ïù¥Î≤§Ìä∏Î•º ÏßÑÌñâÌï©ÎãàÎã§!
        
üìÖ Ïù¥Î≤§Ìä∏ Í∏∞Í∞Ñ: 2024ÎÖÑ 1Ïõî 15Ïùº ~ 2Ïõî 15Ïùº

üéØ ÌòúÌÉù:
‚Ä¢ Ï≤´ Íµ¨ÎèÖ 30% Ìï†Ïù∏
‚Ä¢ 3Ïùº ÏÑ∏Ìä∏ Î¨¥Î£åÎ∞∞ÏÜ°
‚Ä¢ Ï∂îÏ≤úÏù∏ Ï†ÅÎ¶ΩÍ∏à 10,000Ïõê

üî• Ï∂îÍ∞Ä ÌòúÌÉù:
‚Ä¢ ÏπúÍµ¨ Ï∂îÏ≤ú Ïãú ÏñëÏ™Ω Î™®Îëê Ï†ÅÎ¶ΩÍ∏à ÏßÄÍ∏â
‚Ä¢ ÌõÑÍ∏∞ ÏûëÏÑ± Ïãú Îã§Ïùå Ï£ºÎ¨∏ 5% Ìï†Ïù∏

ÎßéÏùÄ Ï∞∏Ïó¨ Î∂ÄÌÉÅÎìúÎ¶ΩÎãàÎã§!`,
        author: 'MealStack Ïö¥ÏòÅÌåÄ',
        createdAt: '2024-01-15',
        views: 1245,
        isImportant: true,
        isNew: true
      },
      {
        id: 2,
        category: 'service',
        title: 'Î∞∞ÏÜ°ÏßÄÏó≠ ÌôïÎåÄ ÏïàÎÇ¥',
        content: `ÏïàÎÖïÌïòÏÑ∏Ïöî, MealStackÏûÖÎãàÎã§.

Îçî ÎßéÏùÄ Í≥†Í∞ùÎãòÍªò ÏÑúÎπÑÏä§Î•º Ï†úÍ≥µÌïòÍ∏∞ ÏúÑÌï¥ Î∞∞ÏÜ°ÏßÄÏó≠ÏùÑ ÌôïÎåÄÌï©ÎãàÎã§.

üì¶ Ïã†Í∑ú Î∞∞ÏÜ°ÏßÄÏó≠:
‚Ä¢ Î∂ÄÏÇ∞Í¥ëÏó≠Ïãú Ï†ÑÏ≤¥ (Í∏∞Ï°¥: ÏùºÎ∂Ä ÏßÄÏó≠)
‚Ä¢ ÎåÄÍµ¨Í¥ëÏó≠Ïãú Ï†ÑÏ≤¥ 
‚Ä¢ ÎåÄÏ†ÑÍ¥ëÏó≠Ïãú Ï†ÑÏ≤¥
‚Ä¢ Í¥ëÏ£ºÍ¥ëÏó≠Ïãú Ï†ÑÏ≤¥

‚è∞ Î∞∞ÏÜ°ÏãúÍ∞Ñ:
‚Ä¢ ÏàòÎèÑÍ∂å: Ï£ºÎ¨∏ ÌõÑ 1-2Ïùº
‚Ä¢ Í¥ëÏó≠Ïãú: Ï£ºÎ¨∏ ÌõÑ 2-3Ïùº

Í∞êÏÇ¨Ìï©ÎãàÎã§.`,
        author: 'MealStack Ïö¥ÏòÅÌåÄ',
        createdAt: '2024-01-12',
        views: 892,
        isImportant: false,
        isNew: true
      },
      {
        id: 3,
        category: 'system',
        title: 'Ïï± ÏóÖÎç∞Ïù¥Ìä∏ ÏïàÎÇ¥ (v1.1.0)',
        content: `MealStack Ïï±Ïù¥ ÏóÖÎç∞Ïù¥Ìä∏ ÎêòÏóàÏäµÎãàÎã§.

üÜï ÏÉàÎ°úÏö¥ Í∏∞Îä•:
‚Ä¢ Ï£ºÎ¨∏ ÏÉÅÌÉú Ïã§ÏãúÍ∞Ñ ÏïåÎ¶º
‚Ä¢ Î∞∞ÏÜ° Ï∂îÏ†Å Í∏∞Îä• Í∞úÏÑ†
‚Ä¢ Íµ¨ÎèÖ ÏùºÏãúÏ†ïÏßÄ/Ïû¨Í∞ú Í∏∞Îä•
‚Ä¢ ÏòÅÏñë ÏÑ±Î∂Ñ ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Ï∂îÍ∞Ä

üîß Í∞úÏÑ†ÏÇ¨Ìï≠:
‚Ä¢ Í≤∞Ï†ú ÌîÑÎ°úÏÑ∏Ïä§ ÏµúÏ†ÅÌôî
‚Ä¢ Ïï± ÏÑ±Îä• Í∞úÏÑ†
‚Ä¢ UI/UX Í∞úÏÑ†

‚ö†Ô∏è ÏïàÏ†ïÏ†ÅÏù∏ ÏÑúÎπÑÏä§ Ïù¥Ïö©ÏùÑ ÏúÑÌï¥ ÏµúÏã† Î≤ÑÏ†ÑÏúºÎ°ú ÏóÖÎç∞Ïù¥Ìä∏Ìï¥ Ï£ºÏÑ∏Ïöî.`,
        author: 'MealStack Í∞úÎ∞úÌåÄ',
        createdAt: '2024-01-10',
        views: 567,
        isImportant: false,
        isNew: false
      },
      {
        id: 4,
        category: 'service',
        title: 'ÏÑ§ Ïó∞Ìú¥ Î∞∞ÏÜ° ÏùºÏ†ï ÏïàÎÇ¥',
        content: `ÏÑ§ Ïó∞Ìú¥ Í∏∞Í∞Ñ Ï§ë Î∞∞ÏÜ° ÏùºÏ†ïÏùÑ ÏïàÎÇ¥ÎìúÎ¶ΩÎãàÎã§.

üóìÔ∏è Ïó∞Ìú¥ Í∏∞Í∞Ñ: 2024ÎÖÑ 2Ïõî 9Ïùº ~ 2Ïõî 12Ïùº

üì¶ Î∞∞ÏÜ° ÏùºÏ†ï:
‚Ä¢ 2Ïõî 8Ïùº(Î™©) 18Ïãú Ïù¥ÌõÑ Ï£ºÎ¨∏: 2Ïõî 13Ïùº(Ìôî) ÏàúÏ∞® Î∞∞ÏÜ°
‚Ä¢ Ïã†ÏÑ†ÏãùÌíà ÌäπÏÑ±ÏÉÅ Ïó∞Ìú¥ Ï§ë Î∞∞ÏÜ° Ï§ëÎã®
‚Ä¢ 2Ïõî 13ÏùºÎ∂ÄÌÑ∞ Ï†ïÏÉÅ Î∞∞ÏÜ°

üí° Ï∂îÏ≤úÏÇ¨Ìï≠:
‚Ä¢ Ïó∞Ìú¥ Ï†Ñ ÎØ∏Î¶¨ Ï£ºÎ¨∏Ìï¥ Ï£ºÏÑ∏Ïöî
‚Ä¢ Íµ¨ÎèÖ Í≥†Í∞ùÎãòÍªòÎäî Î≥ÑÎèÑ ÏïàÎÇ¥ ÏòàÏ†ï

Î∂àÌé∏ÏùÑ ÎìúÎ†§ Ï£ÑÏÜ°Ìï©ÎãàÎã§.`,
        author: 'MealStack Ïö¥ÏòÅÌåÄ',
        createdAt: '2024-01-08',
        views: 734,
        isImportant: true,
        isNew: false
      },
      {
        id: 5,
        category: 'event',
        title: 'ÌõÑÍ∏∞ Ïù¥Î≤§Ìä∏ ÎãπÏ≤®Ïûê Î∞úÌëú',
        content: `12Ïõî ÌõÑÍ∏∞ ÏûëÏÑ± Ïù¥Î≤§Ìä∏ ÎãπÏ≤®ÏûêÎ•º Î∞úÌëúÌï©ÎãàÎã§.

üèÜ ÎãπÏ≤®Ïûê (Ï¥ù 10Î™Ö):
‚Ä¢ 1Îì± (1Î™Ö): 3Í∞úÏõî Î¨¥Î£å Íµ¨ÎèÖ - ÍπÄ**Îãò
‚Ä¢ 2Îì± (3Î™Ö): 1Í∞úÏõî Î¨¥Î£å Íµ¨ÎèÖ - Ïù¥**Îãò, Î∞ï**Îãò, Ïµú**Îãò  
‚Ä¢ 3Îì± (6Î™Ö): Ï†ÅÎ¶ΩÍ∏à 50,000Ïõê - Ï†ï**Îãò Ïô∏ 5Î∂Ñ

üìß ÎãπÏ≤®Ïûê ÏïàÎÇ¥:
‚Ä¢ Í∞úÎ≥Ñ Ïó∞ÎùΩ ÏòàÏ†ï (SMS/Ïù¥Î©îÏùº)
‚Ä¢ Í≤ΩÌíà ÏßÄÍ∏â: 1Ïõî 20Ïùº ÏòàÏ†ï

Îã§Ïùå Ïù¥Î≤§Ìä∏ÎèÑ ÎßéÏùÄ Í¥ÄÏã¨ Î∂ÄÌÉÅÎìúÎ¶ΩÎãàÎã§!`,
        author: 'MealStack ÎßàÏºÄÌåÖÌåÄ',
        createdAt: '2024-01-05',
        views: 456,
        isImportant: false,
        isNew: false
      }
    ];
    
    setNotices(mockNotices);
  };
  
  const getCategoryColor = (category) => {
    switch (category) {
      case 'event':
        return 'bg-pink-600 text-white';
      case 'service':
        return 'bg-blue-600 text-white';
      case 'system':
        return 'bg-green-600 text-white';
      default:
        return 'bg-gray-600 text-white';
    }
  };
  
  const getCategoryLabel = (category) => {
    const found = categories.find(cat => cat.id === category);
    return found ? found.label : category;
  };
  
  const filteredNotices = activeCategory === 'all' 
    ? notices 
    : notices.filter(notice => notice.category === activeCategory);
  
  const handleNoticeClick = (notice) => {
    setSelectedNotice(notice);
    // Ï°∞ÌöåÏàò Ï¶ùÍ∞Ä (Ïã§Ï†úÎ°úÎäî API Ìò∏Ï∂ú)
    setNotices(prev => prev.map(n => 
      n.id === notice.id ? { ...n, views: n.views + 1 } : n
    ));
  };
  
  const closeNoticeDetail = () => {
    setSelectedNotice(null);
  };
  
  if (!isAuthenticated) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="w-12 h-12 loading-spinner"></div>
      </div>
    );
  }
  
  return (
    <div className="min-h-screen bg-background-black pb-20">
      <Header title="Í≥µÏßÄÏÇ¨Ìï≠" showBackButton />
      
      <main className="px-4 py-6">
        {/* Ïπ¥ÌÖåÍ≥†Î¶¨ ÌïÑÌÑ∞ */}
        <div className="flex space-x-2 mb-6 overflow-x-auto">
          {categories.map((category) => (
            <button
              key={category.id}
              onClick={() => setActiveCategory(category.id)}
              className={`px-4 py-2 rounded-full text-sm font-medium whitespace-nowrap transition-colors ${
                activeCategory === category.id
                  ? 'bg-primary-red text-white'
                  : 'bg-card-gray text-text-gray hover:text-text-white'
              }`}
            >
              {category.label}
            </button>
          ))}
        </div>
        
        {/* Í≥µÏßÄÏÇ¨Ìï≠ Î™©Î°ù */}
        <div className="space-y-4">
          {filteredNotices.length > 0 ? (
            filteredNotices.map((notice) => (
              <Card 
                key={notice.id} 
                variant="default"
                className="cursor-pointer hover:bg-card-dark-gray transition-colors"
                onClick={() => handleNoticeClick(notice)}
              >
                <div className="flex items-start justify-between mb-2">
                  <div className="flex items-center space-x-2">
                    <span className={`px-2 py-1 rounded text-xs ${getCategoryColor(notice.category)}`}>
                      {getCategoryLabel(notice.category)}
                    </span>
                    {notice.isImportant && (
                      <span className="px-2 py-1 bg-primary-red text-white text-xs rounded">
                        Ï§ëÏöî
                      </span>
                    )}
                    {notice.isNew && (
                      <span className="px-2 py-1 bg-green-600 text-white text-xs rounded">
                        NEW
                      </span>
                    )}
                  </div>
                  <span className="text-text-gray text-xs">Ï°∞Ìöå {notice.views}</span>
                </div>
                
                <h3 className="font-bold text-text-white mb-2 line-clamp-2">
                  {notice.title}
                </h3>
                
                <div className="flex justify-between items-center">
                  <span className="text-text-gray text-sm">{notice.author}</span>
                  <span className="text-text-gray text-sm">{notice.createdAt}</span>
                </div>
              </Card>
            ))
          ) : (
            <Card variant="default">
              <div className="text-center py-8">
                <p className="text-text-gray">Ìï¥Îãπ Ïπ¥ÌÖåÍ≥†Î¶¨Ïùò Í≥µÏßÄÏÇ¨Ìï≠Ïù¥ ÏóÜÏäµÎãàÎã§.</p>
              </div>
            </Card>
          )}
        </div>
      </main>
      
      {/* Í≥µÏßÄÏÇ¨Ìï≠ ÏÉÅÏÑ∏ Î™®Îã¨ */}
      {selectedNotice && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-end justify-center z-50">
          <div className="w-full max-w-md bg-background-dark rounded-t-xl max-h-[90vh] overflow-hidden flex flex-col">
            {/* Ìó§Îçî */}
            <div className="flex items-center justify-between p-6 border-b border-border-gray">
              <div className="flex items-center space-x-2">
                <span className={`px-2 py-1 rounded text-xs ${getCategoryColor(selectedNotice.category)}`}>
                  {getCategoryLabel(selectedNotice.category)}
                </span>
                {selectedNotice.isImportant && (
                  <span className="px-2 py-1 bg-primary-red text-white text-xs rounded">
                    Ï§ëÏöî
                  </span>
                )}
              </div>
              <button
                onClick={closeNoticeDetail}
                className="text-text-gray hover:text-text-white"
              >
                ‚úï
              </button>
            </div>
            
            {/* ÏΩòÌÖêÏ∏† */}
            <div className="flex-1 overflow-y-auto p-6">
              <h2 className="text-lg font-bold text-text-white mb-4">
                {selectedNotice.title}
              </h2>
              
              <div className="flex justify-between items-center mb-6 pb-4 border-b border-border-gray">
                <div>
                  <p className="text-text-gray text-sm">{selectedNotice.author}</p>
                  <p className="text-text-gray text-sm">{selectedNotice.createdAt}</p>
                </div>
                <p className="text-text-gray text-sm">Ï°∞Ìöå {selectedNotice.views}</p>
              </div>
              
              <div className="text-text-white text-sm leading-relaxed whitespace-pre-line">
                {selectedNotice.content}
              </div>
            </div>
            
            {/* ÌïòÎã® Î≤ÑÌäº */}
            <div className="p-6 border-t border-border-gray">
              <button
                onClick={closeNoticeDetail}
                className="w-full py-3 bg-card-gray text-text-white rounded-lg hover:bg-card-dark-gray transition-colors"
              >
                Îã´Í∏∞
              </button>
            </div>
          </div>
        </div>
      )}
      
      <BottomNav />
    </div>
  );
}